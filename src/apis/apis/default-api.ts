// tslint:disable
/**
 * blog_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import globalAxios from "axios";
import type { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "../base";
import type { RequestArgs } from "../base";
// @ts-ignore
import type { CollectCollectActionRequest } from "../models";
// @ts-ignore
import type { CollectCollectActionResponse } from "../models";
// @ts-ignore
import type { CommentCommentActionRequest } from "../models";
// @ts-ignore
import type { CommentCommentActionResponse } from "../models";
// @ts-ignore
import type { CommentCommentDelActionRequest } from "../models";
// @ts-ignore
import type { CommentCommentListResponse } from "../models";
// @ts-ignore
import type { CommonBaseResponse } from "../models";
// @ts-ignore
import type { CommonUploadResponse } from "../models";
// @ts-ignore
import type { FavoriteFavoriteActionRequest } from "../models";
// @ts-ignore
import type { FavoriteFavoriteActionResponse } from "../models";
// @ts-ignore
import type { PublishActionRequest } from "../models";
// @ts-ignore
import type { PublishActionResponse } from "../models";
// @ts-ignore
import type { PublishArticleResponse } from "../models";
// @ts-ignore
import type { PublishCardsResponse } from "../models";
// @ts-ignore
import type { PublishCreateActionRequest } from "../models";
// @ts-ignore
import type { PublishCreateActionResponse } from "../models";
// @ts-ignore
import type { PublishDelActionRequest } from "../models";
// @ts-ignore
import type { PublishModifyActionRequest } from "../models";
// @ts-ignore
import type { RelationRelationActionRequest } from "../models";
// @ts-ignore
import type { RelationRelationActionResponse } from "../models";
// @ts-ignore
import type { RelationRelationFollowListResponse } from "../models";
// @ts-ignore
import type { UserUserActionProfileModifyRequest } from "../models";
// @ts-ignore
import type { UserUserActionPwdModifyRequest } from "../models";
// @ts-ignore
import type { UserUserActionRequest } from "../models";
// @ts-ignore
import type { UserUserActionResponse } from "../models";
// @ts-ignore
import type { UserUserResponse } from "../models";
import { Configuration } from "@/apis";
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Allows a user to collect an item (e.g., an article or post).
     * @summary 对文章进行收藏或者取消收藏
     * @param {CollectCollectActionRequest} [collectCollectActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCollectActionPost: async (
      collectCollectActionRequest?: CollectCollectActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/collect/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof collectCollectActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            collectCollectActionRequest !== undefined
              ? collectCollectActionRequest
              : {},
          )
        : collectCollectActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Allows a user to collect an item (e.g., an article or post).
     * @summary 对文章进行收藏或者取消收藏
     * @param {CollectCollectActionRequest} [collectCollectActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCollectActionPost_1: async (
      collectCollectActionRequest?: CollectCollectActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/collect/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof collectCollectActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            collectCollectActionRequest !== undefined
              ? collectCollectActionRequest
              : {},
          )
        : collectCollectActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 删除博文中的评论
     * @summary 删除评论
     * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionDelete: async (
      commentCommentDelActionRequest?: CommentCommentDelActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/comment/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof commentCommentDelActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            commentCommentDelActionRequest !== undefined
              ? commentCommentDelActionRequest
              : {},
          )
        : commentCommentDelActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 删除博文中的评论
     * @summary 删除评论
     * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionDelete_2: async (
      commentCommentDelActionRequest?: CommentCommentDelActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/comment/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof commentCommentDelActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            commentCommentDelActionRequest !== undefined
              ? commentCommentDelActionRequest
              : {},
          )
        : commentCommentDelActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 向博文添加新评论
     * @summary 新增评论
     * @param {CommentCommentActionRequest} [commentCommentActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionPost: async (
      commentCommentActionRequest?: CommentCommentActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/comment/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof commentCommentActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            commentCommentActionRequest !== undefined
              ? commentCommentActionRequest
              : {},
          )
        : commentCommentActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 向博文添加新评论
     * @summary 新增评论
     * @param {CommentCommentActionRequest} [commentCommentActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionPost_3: async (
      commentCommentActionRequest?: CommentCommentActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/comment/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof commentCommentActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            commentCommentActionRequest !== undefined
              ? commentCommentActionRequest
              : {},
          )
        : commentCommentActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取博文的评论列表
     * @summary 获取评论列表
     * @param {string} [aHashId]
     * @param {string} [cHashId]
     * @param {number} [type] 1:请求一级评论 2：请求二级评论
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentListGet: async (
      aHashId?: string,
      cHashId?: string,
      type?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/comment/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (aHashId !== undefined) {
        localVarQueryParameter["AHashId"] = aHashId;
      }

      if (cHashId !== undefined) {
        localVarQueryParameter["CHashId"] = cHashId;
      }

      if (type !== undefined) {
        localVarQueryParameter["Type"] = type;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取博文的评论列表
     * @summary 获取评论列表
     * @param {string} [aHashId]
     * @param {string} [cHashId]
     * @param {number} [type] 1:请求一级评论 2：请求二级评论
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentListGet_4: async (
      aHashId?: string,
      cHashId?: string,
      type?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/comment/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (aHashId !== undefined) {
        localVarQueryParameter["AHashId"] = aHashId;
      }

      if (cHashId !== undefined) {
        localVarQueryParameter["CHashId"] = cHashId;
      }

      if (type !== undefined) {
        localVarQueryParameter["Type"] = type;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Allows a user to favorite an article.
     * @summary 对文章进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionArticlePost: async (
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/favorite/action/article`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof favoriteFavoriteActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            favoriteFavoriteActionRequest !== undefined
              ? favoriteFavoriteActionRequest
              : {},
          )
        : favoriteFavoriteActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Allows a user to favorite an article.
     * @summary 对文章进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionArticlePost_5: async (
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/favorite/action/article`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof favoriteFavoriteActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            favoriteFavoriteActionRequest !== undefined
              ? favoriteFavoriteActionRequest
              : {},
          )
        : favoriteFavoriteActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Allows a user to comment on a favorite item.
     * @summary 对评论进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionCommentPost: async (
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/favorite/action/comment`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof favoriteFavoriteActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            favoriteFavoriteActionRequest !== undefined
              ? favoriteFavoriteActionRequest
              : {},
          )
        : favoriteFavoriteActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Allows a user to comment on a favorite item.
     * @summary 对评论进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionCommentPost_6: async (
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/favorite/action/comment`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof favoriteFavoriteActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            favoriteFavoriteActionRequest !== undefined
              ? favoriteFavoriteActionRequest
              : {},
          )
        : favoriteFavoriteActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口删除一篇文章
     * @summary 删除文章
     * @param {PublishDelActionRequest} [publishDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionDelete: async (
      publishDelActionRequest?: PublishDelActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishDelActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishDelActionRequest !== undefined
              ? publishDelActionRequest
              : {},
          )
        : publishDelActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口删除一篇文章
     * @summary 删除文章
     * @param {PublishDelActionRequest} [publishDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionDelete_7: async (
      publishDelActionRequest?: PublishDelActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishDelActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishDelActionRequest !== undefined
              ? publishDelActionRequest
              : {},
          )
        : publishDelActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口修改一篇文章
     * @summary 修改文章
     * @param {PublishModifyActionRequest} [publishModifyActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPatch: async (
      publishModifyActionRequest?: PublishModifyActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishModifyActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishModifyActionRequest !== undefined
              ? publishModifyActionRequest
              : {},
          )
        : publishModifyActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口修改一篇文章
     * @summary 修改文章
     * @param {PublishModifyActionRequest} [publishModifyActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPatch_8: async (
      publishModifyActionRequest?: PublishModifyActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishModifyActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishModifyActionRequest !== undefined
              ? publishModifyActionRequest
              : {},
          )
        : publishModifyActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口发表一篇文章
     * @summary 发表文章
     * @param {PublishCreateActionRequest} [publishCreateActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPost: async (
      publishCreateActionRequest?: PublishCreateActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishCreateActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishCreateActionRequest !== undefined
              ? publishCreateActionRequest
              : {},
          )
        : publishCreateActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口发表一篇文章
     * @summary 发表文章
     * @param {PublishCreateActionRequest} [publishCreateActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPost_9: async (
      publishCreateActionRequest?: PublishCreateActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishCreateActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishCreateActionRequest !== undefined
              ? publishCreateActionRequest
              : {},
          )
        : publishCreateActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口获取某篇文章的详细信息
     * @summary 获取文章详情
     * @param {string} [aHashID] 文章的hashid
     * @param {string} [uHashID]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishDetailGet: async (
      aHashID?: string,
      uHashID?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/detail`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (aHashID !== undefined) {
        localVarQueryParameter["AHashID"] = aHashID;
      }

      if (uHashID !== undefined) {
        localVarQueryParameter["UHashID"] = uHashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口获取某篇文章的详细信息
     * @summary 获取文章详情
     * @param {string} [aHashID] 文章的hashid
     * @param {string} [uHashID]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishDetailGet_10: async (
      aHashID?: string,
      uHashID?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/detail`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (aHashID !== undefined) {
        localVarQueryParameter["AHashID"] = aHashID;
      }

      if (uHashID !== undefined) {
        localVarQueryParameter["UHashID"] = uHashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口获取文章列表
     * @summary 获取文章列表
     * @param {number} [offset]
     * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishListGet: async (
      offset?: number,
      uHashID?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (offset !== undefined) {
        localVarQueryParameter["Offset"] = offset;
      }

      if (uHashID !== undefined) {
        localVarQueryParameter["UHashID"] = uHashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口获取文章列表
     * @summary 获取文章列表
     * @param {number} [offset]
     * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishListGet_11: async (
      offset?: number,
      uHashID?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (offset !== undefined) {
        localVarQueryParameter["Offset"] = offset;
      }

      if (uHashID !== undefined) {
        localVarQueryParameter["UHashID"] = uHashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口增加某篇文章的阅读数
     * @summary 增加文章阅读数
     * @param {PublishActionRequest} [publishActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishViewAddPost: async (
      publishActionRequest?: PublishActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/view_add`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishActionRequest !== undefined ? publishActionRequest : {},
          )
        : publishActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过此接口增加某篇文章的阅读数
     * @summary 增加文章阅读数
     * @param {PublishActionRequest} [publishActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishViewAddPost_12: async (
      publishActionRequest?: PublishActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/publish/view_add`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof publishActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            publishActionRequest !== undefined ? publishActionRequest : {},
          )
        : publishActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户对其他用户进行关注或取消关注
     * @summary 关注/取消关注
     * @param {RelationRelationActionRequest} [relationRelationActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationActionPost: async (
      relationRelationActionRequest?: RelationRelationActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/relation/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof relationRelationActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            relationRelationActionRequest !== undefined
              ? relationRelationActionRequest
              : {},
          )
        : relationRelationActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户对其他用户进行关注或取消关注
     * @summary 关注/取消关注
     * @param {RelationRelationActionRequest} [relationRelationActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationActionPost_13: async (
      relationRelationActionRequest?: RelationRelationActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/relation/action`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof relationRelationActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            relationRelationActionRequest !== undefined
              ? relationRelationActionRequest
              : {},
          )
        : relationRelationActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定用户的关注列表
     * @summary 获取关注列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowListGet: async (
      uhashID: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uhashID' is not null or undefined
      if (uhashID === null || uhashID === undefined) {
        throw new RequiredError(
          "uhashID",
          "Required parameter uhashID was null or undefined when calling blogServerRelationFollowListGet.",
        );
      }
      const localVarPath = `/blog_server/relation/follow/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uhashID !== undefined) {
        localVarQueryParameter["UhashID"] = uhashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定用户的关注列表
     * @summary 获取关注列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowListGet_14: async (
      uhashID: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uhashID' is not null or undefined
      if (uhashID === null || uhashID === undefined) {
        throw new RequiredError(
          "uhashID",
          "Required parameter uhashID was null or undefined when calling blogServerRelationFollowListGet_14.",
        );
      }
      const localVarPath = `/blog_server/relation/follow/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uhashID !== undefined) {
        localVarQueryParameter["UhashID"] = uhashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定用户的粉丝列表
     * @summary 获取粉丝列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowerListGet: async (
      uhashID: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uhashID' is not null or undefined
      if (uhashID === null || uhashID === undefined) {
        throw new RequiredError(
          "uhashID",
          "Required parameter uhashID was null or undefined when calling blogServerRelationFollowerListGet.",
        );
      }
      const localVarPath = `/blog_server/relation/follower/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uhashID !== undefined) {
        localVarQueryParameter["UhashID"] = uhashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定用户的粉丝列表
     * @summary 获取粉丝列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowerListGet_15: async (
      uhashID: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uhashID' is not null or undefined
      if (uhashID === null || uhashID === undefined) {
        throw new RequiredError(
          "uhashID",
          "Required parameter uhashID was null or undefined when calling blogServerRelationFollowerListGet_15.",
        );
      }
      const localVarPath = `/blog_server/relation/follower/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uhashID !== undefined) {
        localVarQueryParameter["UhashID"] = uhashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 根据用户请求获取对应的用户信息
     * @summary 获取用户信息
     * @param {string} uHashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserGet: async (
      uHashID: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uHashID' is not null or undefined
      if (uHashID === null || uHashID === undefined) {
        throw new RequiredError(
          "uHashID",
          "Required parameter uHashID was null or undefined when calling blogServerUserGet.",
        );
      }
      const localVarPath = `/blog_server/user`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uHashID !== undefined) {
        localVarQueryParameter["UHashID"] = uHashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 根据用户请求获取对应的用户信息
     * @summary 获取用户信息
     * @param {string} uHashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserGet_16: async (
      uHashID: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uHashID' is not null or undefined
      if (uHashID === null || uHashID === undefined) {
        throw new RequiredError(
          "uHashID",
          "Required parameter uHashID was null or undefined when calling blogServerUserGet_16.",
        );
      }
      const localVarPath = `/blog_server/user`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (uHashID !== undefined) {
        localVarQueryParameter["UHashID"] = uHashID;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过提供用户名和密码登录账户
     * @summary 用户登录
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserLoginPost: async (
      userUserActionRequest?: UserUserActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/login`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionRequest !== undefined ? userUserActionRequest : {},
          )
        : userUserActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过提供用户名和密码登录账户
     * @summary 用户登录
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserLoginPost_17: async (
      userUserActionRequest?: UserUserActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/login`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionRequest !== undefined ? userUserActionRequest : {},
          )
        : userUserActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
     * @summary 用户修改资料
     * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserProfileModifyPost: async (
      userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/profile_modify`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionProfileModifyRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionProfileModifyRequest !== undefined
              ? userUserActionProfileModifyRequest
              : {},
          )
        : userUserActionProfileModifyRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
     * @summary 用户修改资料
     * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserProfileModifyPost_18: async (
      userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/profile_modify`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionProfileModifyRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionProfileModifyRequest !== undefined
              ? userUserActionProfileModifyRequest
              : {},
          )
        : userUserActionProfileModifyRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过提供用户名，旧密码，新密码进行修改账户密码
     * @summary 用户修改密码
     * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserPwdModifyPost: async (
      userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/pwd_modify`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionPwdModifyRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionPwdModifyRequest !== undefined
              ? userUserActionPwdModifyRequest
              : {},
          )
        : userUserActionPwdModifyRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过提供用户名，旧密码，新密码进行修改账户密码
     * @summary 用户修改密码
     * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserPwdModifyPost_19: async (
      userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/pwd_modify`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionPwdModifyRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionPwdModifyRequest !== undefined
              ? userUserActionPwdModifyRequest
              : {},
          )
        : userUserActionPwdModifyRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过提供用户名和密码注册账户
     * @summary 用户注册
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserRegisterPost: async (
      userUserActionRequest?: UserUserActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/register`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionRequest !== undefined ? userUserActionRequest : {},
          )
        : userUserActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户通过提供用户名和密码注册账户
     * @summary 用户注册
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserRegisterPost_20: async (
      userUserActionRequest?: UserUserActionRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog_server/user/register`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof userUserActionRequest !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            userUserActionRequest !== undefined ? userUserActionRequest : {},
          )
        : userUserActionRequest || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过该接口上传文件
     * @summary 上传文件
     * @param {any} file 上传的文件
     * @param {string} fileType 上传的类型，是头像还是背景图片
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilePost: async (
      file: any,
      fileType: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      if (file === null || file === undefined) {
        throw new RequiredError(
          "file",
          "Required parameter file was null or undefined when calling uploadFilePost.",
        );
      }
      // verify required parameter 'fileType' is not null or undefined
      if (fileType === null || fileType === undefined) {
        throw new RequiredError(
          "fileType",
          "Required parameter fileType was null or undefined when calling uploadFilePost.",
        );
      }
      const localVarPath = `/upload/file`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      if (fileType !== undefined) {
        localVarFormParams.append("file_type", fileType as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户可以通过该接口上传文件
     * @summary 上传文件
     * @param {any} file 上传的文件
     * @param {string} fileType 上传的类型，是头像还是背景图片
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilePost_21: async (
      file: any,
      fileType: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      if (file === null || file === undefined) {
        throw new RequiredError(
          "file",
          "Required parameter file was null or undefined when calling uploadFilePost_21.",
        );
      }
      // verify required parameter 'fileType' is not null or undefined
      if (fileType === null || fileType === undefined) {
        throw new RequiredError(
          "fileType",
          "Required parameter fileType was null or undefined when calling uploadFilePost_21.",
        );
      }
      const localVarPath = `/upload/file`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      if (fileType !== undefined) {
        localVarFormParams.append("file_type", fileType as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete (localVarUrlObj as any).search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Allows a user to collect an item (e.g., an article or post).
     * @summary 对文章进行收藏或者取消收藏
     * @param {CollectCollectActionRequest} [collectCollectActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCollectActionPost(
      collectCollectActionRequest?: CollectCollectActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CollectCollectActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCollectActionPost(collectCollectActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Allows a user to collect an item (e.g., an article or post).
     * @summary 对文章进行收藏或者取消收藏
     * @param {CollectCollectActionRequest} [collectCollectActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCollectActionPost_1(
      collectCollectActionRequest?: CollectCollectActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CollectCollectActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCollectActionPost_1(collectCollectActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 删除博文中的评论
     * @summary 删除评论
     * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCommentActionDelete(
      commentCommentDelActionRequest?: CommentCommentDelActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommonBaseResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCommentActionDelete(commentCommentDelActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 删除博文中的评论
     * @summary 删除评论
     * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCommentActionDelete_2(
      commentCommentDelActionRequest?: CommentCommentDelActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommonBaseResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCommentActionDelete_2(
        commentCommentDelActionRequest,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 向博文添加新评论
     * @summary 新增评论
     * @param {CommentCommentActionRequest} [commentCommentActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCommentActionPost(
      commentCommentActionRequest?: CommentCommentActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCommentActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCommentActionPost(commentCommentActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 向博文添加新评论
     * @summary 新增评论
     * @param {CommentCommentActionRequest} [commentCommentActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCommentActionPost_3(
      commentCommentActionRequest?: CommentCommentActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCommentActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCommentActionPost_3(commentCommentActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取博文的评论列表
     * @summary 获取评论列表
     * @param {string} [aHashId]
     * @param {string} [cHashId]
     * @param {number} [type] 1:请求一级评论 2：请求二级评论
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCommentListGet(
      aHashId?: string,
      cHashId?: string,
      type?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCommentListResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCommentListGet(aHashId, cHashId, type, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取博文的评论列表
     * @summary 获取评论列表
     * @param {string} [aHashId]
     * @param {string} [cHashId]
     * @param {number} [type] 1:请求一级评论 2：请求二级评论
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerCommentListGet_4(
      aHashId?: string,
      cHashId?: string,
      type?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommentCommentListResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerCommentListGet_4(aHashId, cHashId, type, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Allows a user to favorite an article.
     * @summary 对文章进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerFavoriteActionArticlePost(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<FavoriteFavoriteActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerFavoriteActionArticlePost(
        favoriteFavoriteActionRequest,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Allows a user to favorite an article.
     * @summary 对文章进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerFavoriteActionArticlePost_5(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<FavoriteFavoriteActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerFavoriteActionArticlePost_5(
        favoriteFavoriteActionRequest,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Allows a user to comment on a favorite item.
     * @summary 对评论进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerFavoriteActionCommentPost(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<FavoriteFavoriteActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerFavoriteActionCommentPost(
        favoriteFavoriteActionRequest,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Allows a user to comment on a favorite item.
     * @summary 对评论进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerFavoriteActionCommentPost_6(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<FavoriteFavoriteActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerFavoriteActionCommentPost_6(
        favoriteFavoriteActionRequest,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口删除一篇文章
     * @summary 删除文章
     * @param {PublishDelActionRequest} [publishDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishActionDelete(
      publishDelActionRequest?: PublishDelActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishActionDelete(publishDelActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口删除一篇文章
     * @summary 删除文章
     * @param {PublishDelActionRequest} [publishDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishActionDelete_7(
      publishDelActionRequest?: PublishDelActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishActionDelete_7(publishDelActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口修改一篇文章
     * @summary 修改文章
     * @param {PublishModifyActionRequest} [publishModifyActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishActionPatch(
      publishModifyActionRequest?: PublishModifyActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishActionPatch(publishModifyActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口修改一篇文章
     * @summary 修改文章
     * @param {PublishModifyActionRequest} [publishModifyActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishActionPatch_8(
      publishModifyActionRequest?: PublishModifyActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishActionPatch_8(publishModifyActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口发表一篇文章
     * @summary 发表文章
     * @param {PublishCreateActionRequest} [publishCreateActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishActionPost(
      publishCreateActionRequest?: PublishCreateActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishCreateActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishActionPost(publishCreateActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口发表一篇文章
     * @summary 发表文章
     * @param {PublishCreateActionRequest} [publishCreateActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishActionPost_9(
      publishCreateActionRequest?: PublishCreateActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishCreateActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishActionPost_9(publishCreateActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口获取某篇文章的详细信息
     * @summary 获取文章详情
     * @param {string} [aHashID] 文章的hashid
     * @param {string} [uHashID]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishDetailGet(
      aHashID?: string,
      uHashID?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishArticleResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishDetailGet(aHashID, uHashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口获取某篇文章的详细信息
     * @summary 获取文章详情
     * @param {string} [aHashID] 文章的hashid
     * @param {string} [uHashID]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishDetailGet_10(
      aHashID?: string,
      uHashID?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishArticleResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishDetailGet_10(aHashID, uHashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口获取文章列表
     * @summary 获取文章列表
     * @param {number} [offset]
     * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishListGet(
      offset?: number,
      uHashID?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishCardsResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishListGet(offset, uHashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口获取文章列表
     * @summary 获取文章列表
     * @param {number} [offset]
     * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishListGet_11(
      offset?: number,
      uHashID?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishCardsResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishListGet_11(offset, uHashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口增加某篇文章的阅读数
     * @summary 增加文章阅读数
     * @param {PublishActionRequest} [publishActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishViewAddPost(
      publishActionRequest?: PublishActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishViewAddPost(publishActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过此接口增加某篇文章的阅读数
     * @summary 增加文章阅读数
     * @param {PublishActionRequest} [publishActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerPublishViewAddPost_12(
      publishActionRequest?: PublishActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PublishActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerPublishViewAddPost_12(publishActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户对其他用户进行关注或取消关注
     * @summary 关注/取消关注
     * @param {RelationRelationActionRequest} [relationRelationActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerRelationActionPost(
      relationRelationActionRequest?: RelationRelationActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RelationRelationActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerRelationActionPost(relationRelationActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户对其他用户进行关注或取消关注
     * @summary 关注/取消关注
     * @param {RelationRelationActionRequest} [relationRelationActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerRelationActionPost_13(
      relationRelationActionRequest?: RelationRelationActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RelationRelationActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerRelationActionPost_13(relationRelationActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定用户的关注列表
     * @summary 获取关注列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerRelationFollowListGet(
      uhashID: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RelationRelationFollowListResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerRelationFollowListGet(uhashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定用户的关注列表
     * @summary 获取关注列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerRelationFollowListGet_14(
      uhashID: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RelationRelationFollowListResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerRelationFollowListGet_14(uhashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定用户的粉丝列表
     * @summary 获取粉丝列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerRelationFollowerListGet(
      uhashID: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RelationRelationFollowListResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerRelationFollowerListGet(uhashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定用户的粉丝列表
     * @summary 获取粉丝列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerRelationFollowerListGet_15(
      uhashID: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RelationRelationFollowListResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerRelationFollowerListGet_15(uhashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 根据用户请求获取对应的用户信息
     * @summary 获取用户信息
     * @param {string} uHashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserGet(
      uHashID: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserGet(uHashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 根据用户请求获取对应的用户信息
     * @summary 获取用户信息
     * @param {string} uHashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserGet_16(
      uHashID: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserGet_16(uHashID, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过提供用户名和密码登录账户
     * @summary 用户登录
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserLoginPost(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserLoginPost(userUserActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过提供用户名和密码登录账户
     * @summary 用户登录
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserLoginPost_17(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserLoginPost_17(userUserActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
     * @summary 用户修改资料
     * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserProfileModifyPost(
      userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserProfileModifyPost(
        userUserActionProfileModifyRequest,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
     * @summary 用户修改资料
     * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserProfileModifyPost_18(
      userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserProfileModifyPost_18(
        userUserActionProfileModifyRequest,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过提供用户名，旧密码，新密码进行修改账户密码
     * @summary 用户修改密码
     * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserPwdModifyPost(
      userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserPwdModifyPost(userUserActionPwdModifyRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过提供用户名，旧密码，新密码进行修改账户密码
     * @summary 用户修改密码
     * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserPwdModifyPost_19(
      userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserPwdModifyPost_19(userUserActionPwdModifyRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过提供用户名和密码注册账户
     * @summary 用户注册
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserRegisterPost(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserRegisterPost(userUserActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户通过提供用户名和密码注册账户
     * @summary 用户注册
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async blogServerUserRegisterPost_20(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserUserActionResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).blogServerUserRegisterPost_20(userUserActionRequest, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过该接口上传文件
     * @summary 上传文件
     * @param {any} file 上传的文件
     * @param {string} fileType 上传的类型，是头像还是背景图片
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilePost(
      file: any,
      fileType: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommonUploadResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).uploadFilePost(file, fileType, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户可以通过该接口上传文件
     * @summary 上传文件
     * @param {any} file 上传的文件
     * @param {string} fileType 上传的类型，是头像还是背景图片
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilePost_21(
      file: any,
      fileType: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CommonUploadResponse>
    > {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(
        configuration,
      ).uploadFilePost_21(file, fileType, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Allows a user to collect an item (e.g., an article or post).
     * @summary 对文章进行收藏或者取消收藏
     * @param {CollectCollectActionRequest} [collectCollectActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCollectActionPost(
      collectCollectActionRequest?: CollectCollectActionRequest,
      options?: any,
    ): AxiosPromise<CollectCollectActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerCollectActionPost(collectCollectActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Allows a user to collect an item (e.g., an article or post).
     * @summary 对文章进行收藏或者取消收藏
     * @param {CollectCollectActionRequest} [collectCollectActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCollectActionPost_1(
      collectCollectActionRequest?: CollectCollectActionRequest,
      options?: any,
    ): AxiosPromise<CollectCollectActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerCollectActionPost_1(collectCollectActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 删除博文中的评论
     * @summary 删除评论
     * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionDelete(
      commentCommentDelActionRequest?: CommentCommentDelActionRequest,
      options?: any,
    ): AxiosPromise<CommonBaseResponse> {
      return DefaultApiFp(configuration)
        .blogServerCommentActionDelete(commentCommentDelActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 删除博文中的评论
     * @summary 删除评论
     * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionDelete_2(
      commentCommentDelActionRequest?: CommentCommentDelActionRequest,
      options?: any,
    ): AxiosPromise<CommonBaseResponse> {
      return DefaultApiFp(configuration)
        .blogServerCommentActionDelete_2(
          commentCommentDelActionRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 向博文添加新评论
     * @summary 新增评论
     * @param {CommentCommentActionRequest} [commentCommentActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionPost(
      commentCommentActionRequest?: CommentCommentActionRequest,
      options?: any,
    ): AxiosPromise<CommentCommentActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerCommentActionPost(commentCommentActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 向博文添加新评论
     * @summary 新增评论
     * @param {CommentCommentActionRequest} [commentCommentActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentActionPost_3(
      commentCommentActionRequest?: CommentCommentActionRequest,
      options?: any,
    ): AxiosPromise<CommentCommentActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerCommentActionPost_3(commentCommentActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取博文的评论列表
     * @summary 获取评论列表
     * @param {string} [aHashId]
     * @param {string} [cHashId]
     * @param {number} [type] 1:请求一级评论 2：请求二级评论
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentListGet(
      aHashId?: string,
      cHashId?: string,
      type?: number,
      options?: any,
    ): AxiosPromise<CommentCommentListResponse> {
      return DefaultApiFp(configuration)
        .blogServerCommentListGet(aHashId, cHashId, type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取博文的评论列表
     * @summary 获取评论列表
     * @param {string} [aHashId]
     * @param {string} [cHashId]
     * @param {number} [type] 1:请求一级评论 2：请求二级评论
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerCommentListGet_4(
      aHashId?: string,
      cHashId?: string,
      type?: number,
      options?: any,
    ): AxiosPromise<CommentCommentListResponse> {
      return DefaultApiFp(configuration)
        .blogServerCommentListGet_4(aHashId, cHashId, type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Allows a user to favorite an article.
     * @summary 对文章进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionArticlePost(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): AxiosPromise<FavoriteFavoriteActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerFavoriteActionArticlePost(
          favoriteFavoriteActionRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Allows a user to favorite an article.
     * @summary 对文章进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionArticlePost_5(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): AxiosPromise<FavoriteFavoriteActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerFavoriteActionArticlePost_5(
          favoriteFavoriteActionRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Allows a user to comment on a favorite item.
     * @summary 对评论进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionCommentPost(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): AxiosPromise<FavoriteFavoriteActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerFavoriteActionCommentPost(
          favoriteFavoriteActionRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Allows a user to comment on a favorite item.
     * @summary 对评论进行点赞或者踩
     * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerFavoriteActionCommentPost_6(
      favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
      options?: any,
    ): AxiosPromise<FavoriteFavoriteActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerFavoriteActionCommentPost_6(
          favoriteFavoriteActionRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口删除一篇文章
     * @summary 删除文章
     * @param {PublishDelActionRequest} [publishDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionDelete(
      publishDelActionRequest?: PublishDelActionRequest,
      options?: any,
    ): AxiosPromise<PublishActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishActionDelete(publishDelActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口删除一篇文章
     * @summary 删除文章
     * @param {PublishDelActionRequest} [publishDelActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionDelete_7(
      publishDelActionRequest?: PublishDelActionRequest,
      options?: any,
    ): AxiosPromise<PublishActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishActionDelete_7(publishDelActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口修改一篇文章
     * @summary 修改文章
     * @param {PublishModifyActionRequest} [publishModifyActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPatch(
      publishModifyActionRequest?: PublishModifyActionRequest,
      options?: any,
    ): AxiosPromise<PublishActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishActionPatch(publishModifyActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口修改一篇文章
     * @summary 修改文章
     * @param {PublishModifyActionRequest} [publishModifyActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPatch_8(
      publishModifyActionRequest?: PublishModifyActionRequest,
      options?: any,
    ): AxiosPromise<PublishActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishActionPatch_8(publishModifyActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口发表一篇文章
     * @summary 发表文章
     * @param {PublishCreateActionRequest} [publishCreateActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPost(
      publishCreateActionRequest?: PublishCreateActionRequest,
      options?: any,
    ): AxiosPromise<PublishCreateActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishActionPost(publishCreateActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口发表一篇文章
     * @summary 发表文章
     * @param {PublishCreateActionRequest} [publishCreateActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishActionPost_9(
      publishCreateActionRequest?: PublishCreateActionRequest,
      options?: any,
    ): AxiosPromise<PublishCreateActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishActionPost_9(publishCreateActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口获取某篇文章的详细信息
     * @summary 获取文章详情
     * @param {string} [aHashID] 文章的hashid
     * @param {string} [uHashID]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishDetailGet(
      aHashID?: string,
      uHashID?: string,
      options?: any,
    ): AxiosPromise<PublishArticleResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishDetailGet(aHashID, uHashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口获取某篇文章的详细信息
     * @summary 获取文章详情
     * @param {string} [aHashID] 文章的hashid
     * @param {string} [uHashID]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishDetailGet_10(
      aHashID?: string,
      uHashID?: string,
      options?: any,
    ): AxiosPromise<PublishArticleResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishDetailGet_10(aHashID, uHashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口获取文章列表
     * @summary 获取文章列表
     * @param {number} [offset]
     * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishListGet(
      offset?: number,
      uHashID?: string,
      options?: any,
    ): AxiosPromise<PublishCardsResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishListGet(offset, uHashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口获取文章列表
     * @summary 获取文章列表
     * @param {number} [offset]
     * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishListGet_11(
      offset?: number,
      uHashID?: string,
      options?: any,
    ): AxiosPromise<PublishCardsResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishListGet_11(offset, uHashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口增加某篇文章的阅读数
     * @summary 增加文章阅读数
     * @param {PublishActionRequest} [publishActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishViewAddPost(
      publishActionRequest?: PublishActionRequest,
      options?: any,
    ): AxiosPromise<PublishActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishViewAddPost(publishActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过此接口增加某篇文章的阅读数
     * @summary 增加文章阅读数
     * @param {PublishActionRequest} [publishActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerPublishViewAddPost_12(
      publishActionRequest?: PublishActionRequest,
      options?: any,
    ): AxiosPromise<PublishActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerPublishViewAddPost_12(publishActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户对其他用户进行关注或取消关注
     * @summary 关注/取消关注
     * @param {RelationRelationActionRequest} [relationRelationActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationActionPost(
      relationRelationActionRequest?: RelationRelationActionRequest,
      options?: any,
    ): AxiosPromise<RelationRelationActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerRelationActionPost(relationRelationActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户对其他用户进行关注或取消关注
     * @summary 关注/取消关注
     * @param {RelationRelationActionRequest} [relationRelationActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationActionPost_13(
      relationRelationActionRequest?: RelationRelationActionRequest,
      options?: any,
    ): AxiosPromise<RelationRelationActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerRelationActionPost_13(relationRelationActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定用户的关注列表
     * @summary 获取关注列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowListGet(
      uhashID: string,
      options?: any,
    ): AxiosPromise<RelationRelationFollowListResponse> {
      return DefaultApiFp(configuration)
        .blogServerRelationFollowListGet(uhashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定用户的关注列表
     * @summary 获取关注列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowListGet_14(
      uhashID: string,
      options?: any,
    ): AxiosPromise<RelationRelationFollowListResponse> {
      return DefaultApiFp(configuration)
        .blogServerRelationFollowListGet_14(uhashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定用户的粉丝列表
     * @summary 获取粉丝列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowerListGet(
      uhashID: string,
      options?: any,
    ): AxiosPromise<RelationRelationFollowListResponse> {
      return DefaultApiFp(configuration)
        .blogServerRelationFollowerListGet(uhashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定用户的粉丝列表
     * @summary 获取粉丝列表
     * @param {string} uhashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerRelationFollowerListGet_15(
      uhashID: string,
      options?: any,
    ): AxiosPromise<RelationRelationFollowListResponse> {
      return DefaultApiFp(configuration)
        .blogServerRelationFollowerListGet_15(uhashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 根据用户请求获取对应的用户信息
     * @summary 获取用户信息
     * @param {string} uHashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserGet(
      uHashID: string,
      options?: any,
    ): AxiosPromise<UserUserResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserGet(uHashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 根据用户请求获取对应的用户信息
     * @summary 获取用户信息
     * @param {string} uHashID 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserGet_16(
      uHashID: string,
      options?: any,
    ): AxiosPromise<UserUserResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserGet_16(uHashID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过提供用户名和密码登录账户
     * @summary 用户登录
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserLoginPost(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserLoginPost(userUserActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过提供用户名和密码登录账户
     * @summary 用户登录
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserLoginPost_17(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserLoginPost_17(userUserActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
     * @summary 用户修改资料
     * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserProfileModifyPost(
      userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserProfileModifyPost(
          userUserActionProfileModifyRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
     * @summary 用户修改资料
     * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserProfileModifyPost_18(
      userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserProfileModifyPost_18(
          userUserActionProfileModifyRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过提供用户名，旧密码，新密码进行修改账户密码
     * @summary 用户修改密码
     * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserPwdModifyPost(
      userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserPwdModifyPost(userUserActionPwdModifyRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过提供用户名，旧密码，新密码进行修改账户密码
     * @summary 用户修改密码
     * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserPwdModifyPost_19(
      userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserPwdModifyPost_19(userUserActionPwdModifyRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过提供用户名和密码注册账户
     * @summary 用户注册
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserRegisterPost(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserRegisterPost(userUserActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户通过提供用户名和密码注册账户
     * @summary 用户注册
     * @param {UserUserActionRequest} [userUserActionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blogServerUserRegisterPost_20(
      userUserActionRequest?: UserUserActionRequest,
      options?: any,
    ): AxiosPromise<UserUserActionResponse> {
      return DefaultApiFp(configuration)
        .blogServerUserRegisterPost_20(userUserActionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过该接口上传文件
     * @summary 上传文件
     * @param {any} file 上传的文件
     * @param {string} fileType 上传的类型，是头像还是背景图片
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilePost(
      file: any,
      fileType: string,
      options?: any,
    ): AxiosPromise<CommonUploadResponse> {
      return DefaultApiFp(configuration)
        .uploadFilePost(file, fileType, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户可以通过该接口上传文件
     * @summary 上传文件
     * @param {any} file 上传的文件
     * @param {string} fileType 上传的类型，是头像还是背景图片
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilePost_21(
      file: any,
      fileType: string,
      options?: any,
    ): AxiosPromise<CommonUploadResponse> {
      return DefaultApiFp(configuration)
        .uploadFilePost_21(file, fileType, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
  /**
   * Allows a user to collect an item (e.g., an article or post).
   * @summary 对文章进行收藏或者取消收藏
   * @param {CollectCollectActionRequest} [collectCollectActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCollectActionPost(
    collectCollectActionRequest?: CollectCollectActionRequest,
    options?: any,
  ): AxiosPromise<CollectCollectActionResponse>;

  /**
   * Allows a user to collect an item (e.g., an article or post).
   * @summary 对文章进行收藏或者取消收藏
   * @param {CollectCollectActionRequest} [collectCollectActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCollectActionPost_1(
    collectCollectActionRequest?: CollectCollectActionRequest,
    options?: any,
  ): AxiosPromise<CollectCollectActionResponse>;

  /**
   * 删除博文中的评论
   * @summary 删除评论
   * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCommentActionDelete(
    commentCommentDelActionRequest?: CommentCommentDelActionRequest,
    options?: any,
  ): AxiosPromise<CommonBaseResponse>;

  /**
   * 删除博文中的评论
   * @summary 删除评论
   * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCommentActionDelete_2(
    commentCommentDelActionRequest?: CommentCommentDelActionRequest,
    options?: any,
  ): AxiosPromise<CommonBaseResponse>;

  /**
   * 向博文添加新评论
   * @summary 新增评论
   * @param {CommentCommentActionRequest} [commentCommentActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCommentActionPost(
    commentCommentActionRequest?: CommentCommentActionRequest,
    options?: any,
  ): AxiosPromise<CommentCommentActionResponse>;

  /**
   * 向博文添加新评论
   * @summary 新增评论
   * @param {CommentCommentActionRequest} [commentCommentActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCommentActionPost_3(
    commentCommentActionRequest?: CommentCommentActionRequest,
    options?: any,
  ): AxiosPromise<CommentCommentActionResponse>;

  /**
   * 获取博文的评论列表
   * @summary 获取评论列表
   * @param {string} [aHashId]
   * @param {string} [cHashId]
   * @param {number} [type] 1:请求一级评论 2：请求二级评论
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCommentListGet(
    aHashId?: string,
    cHashId?: string,
    type?: number,
    options?: any,
  ): AxiosPromise<CommentCommentListResponse>;

  /**
   * 获取博文的评论列表
   * @summary 获取评论列表
   * @param {string} [aHashId]
   * @param {string} [cHashId]
   * @param {number} [type] 1:请求一级评论 2：请求二级评论
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerCommentListGet_4(
    aHashId?: string,
    cHashId?: string,
    type?: number,
    options?: any,
  ): AxiosPromise<CommentCommentListResponse>;

  /**
   * Allows a user to favorite an article.
   * @summary 对文章进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerFavoriteActionArticlePost(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ): AxiosPromise<FavoriteFavoriteActionResponse>;

  /**
   * Allows a user to favorite an article.
   * @summary 对文章进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerFavoriteActionArticlePost_5(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ): AxiosPromise<FavoriteFavoriteActionResponse>;

  /**
   * Allows a user to comment on a favorite item.
   * @summary 对评论进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerFavoriteActionCommentPost(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ): AxiosPromise<FavoriteFavoriteActionResponse>;

  /**
   * Allows a user to comment on a favorite item.
   * @summary 对评论进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerFavoriteActionCommentPost_6(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ): AxiosPromise<FavoriteFavoriteActionResponse>;

  /**
   * 用户可以通过此接口删除一篇文章
   * @summary 删除文章
   * @param {PublishDelActionRequest} [publishDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishActionDelete(
    publishDelActionRequest?: PublishDelActionRequest,
    options?: any,
  ): AxiosPromise<PublishActionResponse>;

  /**
   * 用户可以通过此接口删除一篇文章
   * @summary 删除文章
   * @param {PublishDelActionRequest} [publishDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishActionDelete_7(
    publishDelActionRequest?: PublishDelActionRequest,
    options?: any,
  ): AxiosPromise<PublishActionResponse>;

  /**
   * 用户可以通过此接口修改一篇文章
   * @summary 修改文章
   * @param {PublishModifyActionRequest} [publishModifyActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishActionPatch(
    publishModifyActionRequest?: PublishModifyActionRequest,
    options?: any,
  ): AxiosPromise<PublishActionResponse>;

  /**
   * 用户可以通过此接口修改一篇文章
   * @summary 修改文章
   * @param {PublishModifyActionRequest} [publishModifyActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishActionPatch_8(
    publishModifyActionRequest?: PublishModifyActionRequest,
    options?: any,
  ): AxiosPromise<PublishActionResponse>;

  /**
   * 用户可以通过此接口发表一篇文章
   * @summary 发表文章
   * @param {PublishCreateActionRequest} [publishCreateActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishActionPost(
    publishCreateActionRequest?: PublishCreateActionRequest,
    options?: any,
  ): AxiosPromise<PublishCreateActionResponse>;

  /**
   * 用户可以通过此接口发表一篇文章
   * @summary 发表文章
   * @param {PublishCreateActionRequest} [publishCreateActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishActionPost_9(
    publishCreateActionRequest?: PublishCreateActionRequest,
    options?: any,
  ): AxiosPromise<PublishCreateActionResponse>;

  /**
   * 用户可以通过此接口获取某篇文章的详细信息
   * @summary 获取文章详情
   * @param {string} [aHashID] 文章的hashid
   * @param {string} [uHashID]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishDetailGet(
    aHashID?: string,
    uHashID?: string,
    options?: any,
  ): AxiosPromise<PublishArticleResponse>;

  /**
   * 用户可以通过此接口获取某篇文章的详细信息
   * @summary 获取文章详情
   * @param {string} [aHashID] 文章的hashid
   * @param {string} [uHashID]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishDetailGet_10(
    aHashID?: string,
    uHashID?: string,
    options?: any,
  ): AxiosPromise<PublishArticleResponse>;

  /**
   * 用户可以通过此接口获取文章列表
   * @summary 获取文章列表
   * @param {number} [offset]
   * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishListGet(
    offset?: number,
    uHashID?: string,
    options?: any,
  ): AxiosPromise<PublishCardsResponse>;

  /**
   * 用户可以通过此接口获取文章列表
   * @summary 获取文章列表
   * @param {number} [offset]
   * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishListGet_11(
    offset?: number,
    uHashID?: string,
    options?: any,
  ): AxiosPromise<PublishCardsResponse>;

  /**
   * 用户可以通过此接口增加某篇文章的阅读数
   * @summary 增加文章阅读数
   * @param {PublishActionRequest} [publishActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishViewAddPost(
    publishActionRequest?: PublishActionRequest,
    options?: any,
  ): AxiosPromise<PublishActionResponse>;

  /**
   * 用户可以通过此接口增加某篇文章的阅读数
   * @summary 增加文章阅读数
   * @param {PublishActionRequest} [publishActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerPublishViewAddPost_12(
    publishActionRequest?: PublishActionRequest,
    options?: any,
  ): AxiosPromise<PublishActionResponse>;

  /**
   * 用户对其他用户进行关注或取消关注
   * @summary 关注/取消关注
   * @param {RelationRelationActionRequest} [relationRelationActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerRelationActionPost(
    relationRelationActionRequest?: RelationRelationActionRequest,
    options?: any,
  ): AxiosPromise<RelationRelationActionResponse>;

  /**
   * 用户对其他用户进行关注或取消关注
   * @summary 关注/取消关注
   * @param {RelationRelationActionRequest} [relationRelationActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerRelationActionPost_13(
    relationRelationActionRequest?: RelationRelationActionRequest,
    options?: any,
  ): AxiosPromise<RelationRelationActionResponse>;

  /**
   * 获取指定用户的关注列表
   * @summary 获取关注列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerRelationFollowListGet(
    uhashID: string,
    options?: any,
  ): AxiosPromise<RelationRelationFollowListResponse>;

  /**
   * 获取指定用户的关注列表
   * @summary 获取关注列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerRelationFollowListGet_14(
    uhashID: string,
    options?: any,
  ): AxiosPromise<RelationRelationFollowListResponse>;

  /**
   * 获取指定用户的粉丝列表
   * @summary 获取粉丝列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerRelationFollowerListGet(
    uhashID: string,
    options?: any,
  ): AxiosPromise<RelationRelationFollowListResponse>;

  /**
   * 获取指定用户的粉丝列表
   * @summary 获取粉丝列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerRelationFollowerListGet_15(
    uhashID: string,
    options?: any,
  ): AxiosPromise<RelationRelationFollowListResponse>;

  /**
   * 根据用户请求获取对应的用户信息
   * @summary 获取用户信息
   * @param {string} uHashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserGet(
    uHashID: string,
    options?: any,
  ): AxiosPromise<UserUserResponse>;

  /**
   * 根据用户请求获取对应的用户信息
   * @summary 获取用户信息
   * @param {string} uHashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserGet_16(
    uHashID: string,
    options?: any,
  ): AxiosPromise<UserUserResponse>;

  /**
   * 用户通过提供用户名和密码登录账户
   * @summary 用户登录
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserLoginPost(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户通过提供用户名和密码登录账户
   * @summary 用户登录
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserLoginPost_17(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
   * @summary 用户修改资料
   * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserProfileModifyPost(
    userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
   * @summary 用户修改资料
   * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserProfileModifyPost_18(
    userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户通过提供用户名，旧密码，新密码进行修改账户密码
   * @summary 用户修改密码
   * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserPwdModifyPost(
    userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户通过提供用户名，旧密码，新密码进行修改账户密码
   * @summary 用户修改密码
   * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserPwdModifyPost_19(
    userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户通过提供用户名和密码注册账户
   * @summary 用户注册
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserRegisterPost(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户通过提供用户名和密码注册账户
   * @summary 用户注册
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  blogServerUserRegisterPost_20(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ): AxiosPromise<UserUserActionResponse>;

  /**
   * 用户可以通过该接口上传文件
   * @summary 上传文件
   * @param {any} file 上传的文件
   * @param {string} fileType 上传的类型，是头像还是背景图片
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  uploadFilePost(
    file: any,
    fileType: string,
    options?: any,
  ): AxiosPromise<CommonUploadResponse>;

  /**
   * 用户可以通过该接口上传文件
   * @summary 上传文件
   * @param {any} file 上传的文件
   * @param {string} fileType 上传的类型，是头像还是背景图片
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  uploadFilePost_21(
    file: any,
    fileType: string,
    options?: any,
  ): AxiosPromise<CommonUploadResponse>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
  /**
   * Allows a user to collect an item (e.g., an article or post).
   * @summary 对文章进行收藏或者取消收藏
   * @param {CollectCollectActionRequest} [collectCollectActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCollectActionPost(
    collectCollectActionRequest?: CollectCollectActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCollectActionPost(collectCollectActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Allows a user to collect an item (e.g., an article or post).
   * @summary 对文章进行收藏或者取消收藏
   * @param {CollectCollectActionRequest} [collectCollectActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCollectActionPost_1(
    collectCollectActionRequest?: CollectCollectActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCollectActionPost_1(collectCollectActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 删除博文中的评论
   * @summary 删除评论
   * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCommentActionDelete(
    commentCommentDelActionRequest?: CommentCommentDelActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCommentActionDelete(commentCommentDelActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 删除博文中的评论
   * @summary 删除评论
   * @param {CommentCommentDelActionRequest} [commentCommentDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCommentActionDelete_2(
    commentCommentDelActionRequest?: CommentCommentDelActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCommentActionDelete_2(commentCommentDelActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 向博文添加新评论
   * @summary 新增评论
   * @param {CommentCommentActionRequest} [commentCommentActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCommentActionPost(
    commentCommentActionRequest?: CommentCommentActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCommentActionPost(commentCommentActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 向博文添加新评论
   * @summary 新增评论
   * @param {CommentCommentActionRequest} [commentCommentActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCommentActionPost_3(
    commentCommentActionRequest?: CommentCommentActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCommentActionPost_3(commentCommentActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取博文的评论列表
   * @summary 获取评论列表
   * @param {string} [aHashId]
   * @param {string} [cHashId]
   * @param {number} [type] 1:请求一级评论 2：请求二级评论
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCommentListGet(
    aHashId?: string,
    cHashId?: string,
    type?: number,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCommentListGet(aHashId, cHashId, type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取博文的评论列表
   * @summary 获取评论列表
   * @param {string} [aHashId]
   * @param {string} [cHashId]
   * @param {number} [type] 1:请求一级评论 2：请求二级评论
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerCommentListGet_4(
    aHashId?: string,
    cHashId?: string,
    type?: number,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerCommentListGet_4(aHashId, cHashId, type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Allows a user to favorite an article.
   * @summary 对文章进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerFavoriteActionArticlePost(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerFavoriteActionArticlePost(
        favoriteFavoriteActionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Allows a user to favorite an article.
   * @summary 对文章进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerFavoriteActionArticlePost_5(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerFavoriteActionArticlePost_5(
        favoriteFavoriteActionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Allows a user to comment on a favorite item.
   * @summary 对评论进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerFavoriteActionCommentPost(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerFavoriteActionCommentPost(
        favoriteFavoriteActionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Allows a user to comment on a favorite item.
   * @summary 对评论进行点赞或者踩
   * @param {FavoriteFavoriteActionRequest} [favoriteFavoriteActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerFavoriteActionCommentPost_6(
    favoriteFavoriteActionRequest?: FavoriteFavoriteActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerFavoriteActionCommentPost_6(
        favoriteFavoriteActionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口删除一篇文章
   * @summary 删除文章
   * @param {PublishDelActionRequest} [publishDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishActionDelete(
    publishDelActionRequest?: PublishDelActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishActionDelete(publishDelActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口删除一篇文章
   * @summary 删除文章
   * @param {PublishDelActionRequest} [publishDelActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishActionDelete_7(
    publishDelActionRequest?: PublishDelActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishActionDelete_7(publishDelActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口修改一篇文章
   * @summary 修改文章
   * @param {PublishModifyActionRequest} [publishModifyActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishActionPatch(
    publishModifyActionRequest?: PublishModifyActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishActionPatch(publishModifyActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口修改一篇文章
   * @summary 修改文章
   * @param {PublishModifyActionRequest} [publishModifyActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishActionPatch_8(
    publishModifyActionRequest?: PublishModifyActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishActionPatch_8(publishModifyActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口发表一篇文章
   * @summary 发表文章
   * @param {PublishCreateActionRequest} [publishCreateActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishActionPost(
    publishCreateActionRequest?: PublishCreateActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishActionPost(publishCreateActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口发表一篇文章
   * @summary 发表文章
   * @param {PublishCreateActionRequest} [publishCreateActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishActionPost_9(
    publishCreateActionRequest?: PublishCreateActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishActionPost_9(publishCreateActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口获取某篇文章的详细信息
   * @summary 获取文章详情
   * @param {string} [aHashID] 文章的hashid
   * @param {string} [uHashID]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishDetailGet(
    aHashID?: string,
    uHashID?: string,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishDetailGet(aHashID, uHashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口获取某篇文章的详细信息
   * @summary 获取文章详情
   * @param {string} [aHashID] 文章的hashid
   * @param {string} [uHashID]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishDetailGet_10(
    aHashID?: string,
    uHashID?: string,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishDetailGet_10(aHashID, uHashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口获取文章列表
   * @summary 获取文章列表
   * @param {number} [offset]
   * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishListGet(
    offset?: number,
    uHashID?: string,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishListGet(offset, uHashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口获取文章列表
   * @summary 获取文章列表
   * @param {number} [offset]
   * @param {string} [uHashID] 如果id为0，则根据时间的先后去请求文章列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishListGet_11(
    offset?: number,
    uHashID?: string,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishListGet_11(offset, uHashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口增加某篇文章的阅读数
   * @summary 增加文章阅读数
   * @param {PublishActionRequest} [publishActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishViewAddPost(
    publishActionRequest?: PublishActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishViewAddPost(publishActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过此接口增加某篇文章的阅读数
   * @summary 增加文章阅读数
   * @param {PublishActionRequest} [publishActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerPublishViewAddPost_12(
    publishActionRequest?: PublishActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerPublishViewAddPost_12(publishActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户对其他用户进行关注或取消关注
   * @summary 关注/取消关注
   * @param {RelationRelationActionRequest} [relationRelationActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerRelationActionPost(
    relationRelationActionRequest?: RelationRelationActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerRelationActionPost(relationRelationActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户对其他用户进行关注或取消关注
   * @summary 关注/取消关注
   * @param {RelationRelationActionRequest} [relationRelationActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerRelationActionPost_13(
    relationRelationActionRequest?: RelationRelationActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerRelationActionPost_13(relationRelationActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定用户的关注列表
   * @summary 获取关注列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerRelationFollowListGet(uhashID: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .blogServerRelationFollowListGet(uhashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定用户的关注列表
   * @summary 获取关注列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerRelationFollowListGet_14(uhashID: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .blogServerRelationFollowListGet_14(uhashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定用户的粉丝列表
   * @summary 获取粉丝列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerRelationFollowerListGet(uhashID: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .blogServerRelationFollowerListGet(uhashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定用户的粉丝列表
   * @summary 获取粉丝列表
   * @param {string} uhashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerRelationFollowerListGet_15(uhashID: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .blogServerRelationFollowerListGet_15(uhashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 根据用户请求获取对应的用户信息
   * @summary 获取用户信息
   * @param {string} uHashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserGet(uHashID: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .blogServerUserGet(uHashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 根据用户请求获取对应的用户信息
   * @summary 获取用户信息
   * @param {string} uHashID 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserGet_16(uHashID: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .blogServerUserGet_16(uHashID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过提供用户名和密码登录账户
   * @summary 用户登录
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserLoginPost(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserLoginPost(userUserActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过提供用户名和密码登录账户
   * @summary 用户登录
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserLoginPost_17(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserLoginPost_17(userUserActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
   * @summary 用户修改资料
   * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserProfileModifyPost(
    userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserProfileModifyPost(
        userUserActionProfileModifyRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过上传新的头像，背景图片，或者更改用户签名来进行修改资料
   * @summary 用户修改资料
   * @param {UserUserActionProfileModifyRequest} [userUserActionProfileModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserProfileModifyPost_18(
    userUserActionProfileModifyRequest?: UserUserActionProfileModifyRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserProfileModifyPost_18(
        userUserActionProfileModifyRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过提供用户名，旧密码，新密码进行修改账户密码
   * @summary 用户修改密码
   * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserPwdModifyPost(
    userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserPwdModifyPost(userUserActionPwdModifyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过提供用户名，旧密码，新密码进行修改账户密码
   * @summary 用户修改密码
   * @param {UserUserActionPwdModifyRequest} [userUserActionPwdModifyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserPwdModifyPost_19(
    userUserActionPwdModifyRequest?: UserUserActionPwdModifyRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserPwdModifyPost_19(userUserActionPwdModifyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过提供用户名和密码注册账户
   * @summary 用户注册
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserRegisterPost(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserRegisterPost(userUserActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户通过提供用户名和密码注册账户
   * @summary 用户注册
   * @param {UserUserActionRequest} [userUserActionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public blogServerUserRegisterPost_20(
    userUserActionRequest?: UserUserActionRequest,
    options?: any,
  ) {
    return DefaultApiFp(this.configuration)
      .blogServerUserRegisterPost_20(userUserActionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过该接口上传文件
   * @summary 上传文件
   * @param {any} file 上传的文件
   * @param {string} fileType 上传的类型，是头像还是背景图片
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadFilePost(file: any, fileType: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .uploadFilePost(file, fileType, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户可以通过该接口上传文件
   * @summary 上传文件
   * @param {any} file 上传的文件
   * @param {string} fileType 上传的类型，是头像还是背景图片
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadFilePost_21(file: any, fileType: string, options?: any) {
    return DefaultApiFp(this.configuration)
      .uploadFilePost_21(file, fileType, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
